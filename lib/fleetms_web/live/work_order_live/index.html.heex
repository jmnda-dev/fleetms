<nav class="p-4 lg:mt-1.5 flex" aria-label="Breadcrumb">
  <ol class="inline-flex items-center space-x-1 md:space-x-3">
    <li class="inline-flex items-center">
      <a
        href="#"
        class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white"
      >
        <svg
          class="w-3 h-3 mr-2.5"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path d="m19.707 9.293-2-2-7-7a1 1 0 0 0-1.414 0l-7 7-2 2a1 1 0 0 0 1.414 1.414L2 10.414V18a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v4a1 1 0 0 0 1 1h3a2 2 0 0 0 2-2v-7.586l.293.293a1 1 0 0 0 1.414-1.414Z" />
        </svg>
        Home
      </a>
    </li>
    <li aria-current="page">
      <div class="flex items-center">
        <svg
          class="w-3 h-3 text-gray-400 mx-1"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 6 10"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 9 4-4-4-4"
          />
        </svg>
        <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2 dark:text-gray-400">
          Work Orders
        </span>
      </div>
    </li>
  </ol>
</nav>

<section class="bg-gray-50 dark:bg-gray-900 py-3 sm:py-5">
  <div class="mx-auto max-w-screen-2xl px-4 lg:px-2">
    <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg">
      <div class="border-b dark:border-gray-700 mx-4">
        <div class="flex items-center justify-between space-x-4 pt-3">
          <div class="flex-1 flex items-center space-x-3">
            <h5 class="dark:text-white font-semibold">All Work Orders</h5>
          </div>
        </div>
        <div class="flex flex-col-reverse md:flex-row items-center justify-between md:space-x-4 py-3">
          <div class="w-full lg:w-2/3 flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center">
            <form phx-submit="search" class="w-full md:max-w-sm flex-1 md:mr-4">
              <label
                for="default-search"
                class="text-sm font-medium text-gray-900 sr-only dark:text-white"
              >
                Search
              </label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                  <svg
                    aria-hidden="true"
                    class="w-4 h-4 text-gray-500 dark:text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewbox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </div>
                <input
                  type="search"
                  id="work_order_search_search_query"
                  name="work_order_search[search_query]"
                  class="block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                  phx-debounce="700"
                  value={@search_params.search_query}
                  placeholder="Search work order..."
                />
                <button
                  type="submit"
                  class="text-white absolute right-0 bottom-0 top-0 bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-r-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
                >
                  Search
                </button>
              </div>
            </form>

            <.link patch={
              ~p"/work_orders/filter_form?#{Map.merge(@paginate_sort_opts, @search_params) |> Map.merge(@filter_form_data)}"
            }>
              <button
                id="filterDropdownButton"
                type="button"
                class="flex items-center justify-center w-full px-4 py-2 mr-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg md:w-auto focus:outline-none hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  aria-hidden="true"
                  class="w-4 h-4 mr-2 text-gray-400"
                  viewbox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z"
                  />
                </svg>
                Filter
              </button>
            </.link>
            <form class="flex items-center space-x-4">
              <div>
                <button
                  id="per-page-select-dropdownButton"
                  data-dropdown-toggle="per-page-select-dropdown"
                  class="w-full md:w-auto flex items-center justify-center py-2 px-4 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
                  type="button"
                >
                  Per Page
                  <svg
                    class="-mr-1 ml-1.5 w-5 h-5"
                    fill="currentColor"
                    viewbox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <path
                      clip-rule="evenodd"
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    />
                  </svg>
                </button>
                <div
                  id="per-page-select-dropdown"
                  class="z-10 hidden w-48 p-3 bg-white rounded-lg shadow dark:bg-gray-700"
                >
                  <div>
                    <h6 class="mb-3 text-sm font-medium text-gray-900 dark:text-white">
                      Number of items per page
                    </h6>
                    <ul class="space-y-2 text-sm" aria-labelledby="per-page-select-dropdownButton">
                      <li :for={number <- get_items_per_page_opts()} class="flex items-center">
                        <input
                          id={"#{number}_items_per_page"}
                          name="paginate_sort_opts[per_page]"
                          type="radio"
                          value={number}
                          checked={number == @paginate_sort_opts.per_page}
                          class="w-4 h-4 bg-gray-100 border-gray-300 rounded text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500"
                          phx-change="items_per_page_changed"
                        />
                        <label
                          for={"#{number}_items_per_page"}
                          class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-100"
                        >
                          <%= number %>
                        </label>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>

              <div>
                <button
                  id="sort-order-select-dropdownButton"
                  data-dropdown-toggle="sort-order-select-dropdown"
                  class="w-full md:w-auto flex items-center justify-center py-2 px-4 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
                  type="button"
                >
                  Sort Order
                  <svg
                    class="-mr-1 ml-1.5 w-5 h-5"
                    fill="currentColor"
                    viewbox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <path
                      clip-rule="evenodd"
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    />
                  </svg>
                </button>
                <div
                  id="sort-order-select-dropdown"
                  class="z-10 hidden w-48 p-3 bg-white rounded-lg shadow dark:bg-gray-700"
                >
                  <div>
                    <h6 class="mb-3 text-sm font-medium text-gray-900 dark:text-white">
                      Work Order Sort Order
                    </h6>
                    <ul
                      class="space-y-2 text-sm"
                      aria-labelledby="sort-order-select-dropdownButton"
                    >
                      <li :for={{label, value} <- get_sort_order_opts()} class="flex items-center">
                        <input
                          id={"#{value}_sort_order"}
                          name="paginate_sort_opts[sort_order]"
                          type="radio"
                          value={value}
                          checked={value == @paginate_sort_opts.sort_order}
                          class="w-4 h-4 bg-gray-100 border-gray-300 rounded text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500"
                          phx-change="sort_order_changed"
                        />
                        <label
                          for={"#{value}_sort_order"}
                          class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-100"
                        >
                          <%= label %>
                        </label>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>

              <div>
                <button
                  id="sort-by-select-dropdownButton"
                  data-dropdown-toggle="sort-by-select-dropdown"
                  class="w-full md:w-auto flex items-center justify-center py-2 px-4 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
                  type="button"
                >
                  Sort By
                  <svg
                    class="-mr-1 ml-1.5 w-5 h-5"
                    fill="currentColor"
                    viewbox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                    aria-hidden="true"
                  >
                    <path
                      clip-rule="evenodd"
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                    />
                  </svg>
                </button>
                <div
                  id="sort-by-select-dropdown"
                  class="z-10 hidden w-48 p-3 bg-white rounded-lg shadow dark:bg-gray-700"
                >
                  <div>
                    <h6 class="mb-3 text-sm font-medium text-gray-900 dark:text-white">
                      Sort Work Order by
                    </h6>
                    <ul class="space-y-2 text-sm" aria-labelledby="sort-by-select-dropdownButton">
                      <li :for={{label, value} <- get_sort_by_opts()} class="flex items-center">
                        <input
                          id={"#{value}_sort_by"}
                          name="paginate_sort_opts[sort_by]"
                          type="radio"
                          value={value}
                          checked={value == @paginate_sort_opts.sort_by}
                          class="w-4 h-4 bg-gray-100 border-gray-300 rounded text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600 dark:ring-offset-gray-700 focus:ring-2 dark:bg-gray-600 dark:border-gray-500"
                          phx-change="sort_by_changed"
                        />
                        <label
                          for={"#{value}_sort_by"}
                          class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-100"
                        >
                          <%= label %>
                        </label>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
            </form>
          </div>
          <div
            :if={Ash.can?({Fleetms.Service.WorkOrder, :create}, @current_user)}
            class="w-full md:w-auto flex flex-col md:flex-row mb-3 md:mb-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0"
          >
            <.link navigate={~p"/work_orders/new"}>
              <button
                type="button"
                class="flex items-center justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800"
              >
                <svg
                  class="h-3.5 w-3.5 mr-2"
                  fill="currentColor"
                  viewbox="0 0 20 20"
                  xmlns="http://www.w3.org/2000/svg"
                  aria-hidden="true"
                >
                  <path
                    clip-rule="evenodd"
                    fill-rule="evenodd"
                    d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  />
                </svg>
                Add Work Order
              </button>
            </.link>
          </div>
        </div>
      </div>

      <div :if={@loading} class="flex justify-center">
        <.spinner class="text-center" />
      </div>

      <.table_2
        :if={not @loading}
        id="work_orders"
        rows={@streams.work_orders}
        row_click={
          fn {_id, work_order} ->
            JS.navigate(~p"/work_orders/#{work_order}")
          end
        }
      >
        <:col :let={{_id, work_order}} label="Name">
          <img
            src={Fleetms.VehiclePhoto.url({work_order.vehicle.photo, work_order.vehicle}, :thumb)}
            class="h-8 w-auto mr-3 rounded-md"
            alt={work_order.vehicle.full_name}
          />
          <%= work_order.vehicle.full_name %>
        </:col>

        <:col :let={{_id, work_order}} label="Work Order #">
          <span class="text-primary-600 dark:text-primary-300">
            #<%= work_order.work_order_number %>
          </span>
        </:col>

        <:col :let={{_id, work_order}} label="Status">
          <.badge :if={work_order.status == :Open} kind={:primary} label="Open" />
          <.badge :if={work_order.status == :Completed} kind={:success} label="Completed" />
        </:col>
        <:col :let={{id, work_order}} label="Date Issued">
          <span id={"#{id}-date-issued"} phx-hook="LocalTime">
            <%= work_order.date_and_time_issued %>
          </span>
        </:col>
        <:col :let={{id, work_order}} label="Date Started">
          <span id={"#{id}-date-started"} phx-hook="LocalTime">
            <%= work_order.date_and_time_started %>
          </span>
        </:col>
        <:col :let={{id, work_order}} label="Date Completed">
          <%= if is_nil(work_order.date_and_time_completed) do %>
            <.badge kind={:warning} label="Not Completed yet" />
          <% else %>
            <span id={"#{id}-date-completed"} phx-hook="LocalTime">
              <%= work_order.date_and_time_completed %>
            </span>
          <% end %>
        </:col>
        <:col :let={{_id, work_order}} label="Issued By">
          <.badge kind={:primary} label={work_order.issued_by.user_profile.full_name} />
        </:col>
        <:col :let={{_id, work_order}} label="Assigned To">
          <.badge
            kind={:primary}
            label={work_order.assigned_to && work_order.assigned_to.user_profile.full_name}
          />
        </:col>
        <:col :let={{_id, work_order}} label="Service Tasks">
          <%= work_order.count_of_service_tasks %>
        </:col>
        <:action :let={{id, work_order}}>
          <button
            id={"#{id}-dropdown-button"}
            data-dropdown-toggle={"#{id}-dropdown"}
            class="inline-flex items-center p-0.5 text-sm font-medium text-center text-gray-500 hover:text-gray-800 rounded-lg focus:outline-none dark:text-gray-400 dark:hover:text-gray-100"
            type="button"
            phx-hook="initDropdown"
          >
            <svg
              class="w-5 h-5"
              aria-hidden="true"
              fill="currentColor"
              viewbox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z" />
            </svg>
          </button>
          <div
            id={"#{id}-dropdown"}
            class="hidden z-10 w-44 bg-white rounded divide-y divide-gray-100 shadow dark:bg-gray-700 dark:divide-gray-600"
          >
            <ul
              class="py-1 text-sm text-gray-700 dark:text-gray-200"
              aria-labelledby={"#{id}-dropdown-button"}
            >
              <li
                :if={
                  Ash.can?({work_order, :update}, @current_user) and
                    work_order.status != :Completed
                }
                class={work_order.status == :Completed && "opacity-30"}
              >
                <.link
                  data-tooltip-target={"#{id}_work_order_tooltip-click"}
                  data-tooltip-trigger="click"
                  patch={work_order.status != :Completed && ~p"/work_orders/#{work_order}/edit"}
                  class="block py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
                >
                  Edit
                </.link>
              </li>
            </ul>
            <.tooltip :if={work_order.status == :Completed} id={"#{id}_work_order_tooltip-click"}>
              Can not edit a completed work order. Please reopen the work order to edit.
            </.tooltip>
            <div :if={Ash.can?({work_order, :destroy}, @current_user)} class="py-1">
              <.link
                phx-click={JS.push("delete", value: %{id: work_order.id})}
                data-confirm="Are you sure?"
                class="block py-2 px-4 text-sm text-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 dark:text-gray-200 dark:hover:text-white"
              >
                Delete
              </.link>
            </div>
          </div>
        </:action>
      </.table_2>
    </div>
  </div>
</section>

<section class="flex items-center bg-gray-50 dark:bg-gray-900">
  <div class="w-full max-w-screen-xl px-4 mx-auto lg:px-12">
    <!-- Start coding here -->
    <div class="relative overflow-hidden bg-white rounded-b-lg shadow-md dark:bg-gray-800">
      <nav
        class="flex flex-col items-start justify-between p-4 space-y-3 md:flex-row md:items-center md:space-y-0"
        aria-label="Table navigation"
      >
        <ul class="inline-flex items-stretch -space-x-px">
          <li :if={@paginate_sort_opts.page > 1}>
            <.link
              patch={
                ~p"/work_orders?#{%{@paginate_sort_opts | page: @paginate_sort_opts.page - 1}}"
              }
              class="flex items-center justify-center h-full py-1.5 px-3 ml-0 text-gray-500 bg-white rounded-l-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              <span class="sr-only">Previous</span>
              <svg
                class="w-5 h-5"
                aria-hidden="true"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fill-rule="evenodd"
                  d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                  clip-rule="evenodd"
                >
                </path>
              </svg>
            </.link>
          </li>
          <%= for i <- (@paginate_sort_opts.page - 2)..(@paginate_sort_opts.page + 2), i > 0 and i <= @total_pages do %>
            <li>
              <.link
                patch={~p"/work_orders?#{%{@paginate_sort_opts | page: i}}"}
                aria-current={i == @paginate_sort_opts.page && "page"}
                class={[
                  "flex items-center justify-center px-3 py-2 text-sm leading-tight",
                  i == @paginate_sort_opts.page &&
                    "z-10 border text-primary-600 bg-primary-50 border-primary-300 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white disabled cursor-not-allowed decoration-transparent",
                  i != @paginate_sort_opts.page &&
                    "text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                ]}
              >
                <%= i %>
              </.link>
            </li>
          <% end %>
          <li :if={@has_more?}>
            <.link
              patch={
                ~p"/work_orders?#{%{@paginate_sort_opts | page: @paginate_sort_opts.page + 1}}"
              }
              class="flex items-center justify-center h-full py-1.5 px-3 leading-tight text-gray-500 bg-white rounded-r-lg border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
            >
              <span class="sr-only">Next</span>
              <svg
                class="w-5 h-5"
                aria-hidden="true"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fill-rule="evenodd"
                  d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                  clip-rule="evenodd"
                >
                </path>
              </svg>
            </.link>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</section>

<.modal
  :if={@live_action in [:new, :edit]}
  id="work-order-modal"
  show
  max_width="max-w-5xl"
  phx_click_away={false}
  phx_window_keydown={false}
  on_cancel={JS.navigate(~p"/work_orders")}
>
  <div>
    <.header><%= @page_title %></.header>

    <.simple_form for={@form} id="work-order-form" phx-change="validate" phx-submit="save">
      <div class="grid gap-4 mb-4 sm:grid-cols-2">
        <div id="vehicle-input">
          <.input
            field={@form[:vehicle_id]}
            type="select"
            phx-change="vehicle_selected"
            options={@vehicles}
            prompt="Select Vehicle"
            required
            label="Vehicle"
          />
        </div>
        <.input field={@form[:start_mileage]} type="number" step="any" label="Start Mileage" />
        <.input field={@form[:date_and_time_issued]} type="datetime-local" label="Date Issued" />

        <div id="issued_by-input">
          <.input
            field={@form[:issued_by_id]}
            type="select"
            options={@users}
            prompt=""
            placeholder="Select"
            label="Issued By"
          />
        </div>
        <div id="assigned_to-input">
          <.input
            field={@form[:assigned_to_id]}
            type="select"
            options={@users}
            prompt=""
            placeholder="Select"
            label="Assigned to"
          />
        </div>
        <.input
          field={@form[:repair_category]}
          type="select"
          options={Fleetms.Enums.repair_categories()}
          prompt=""
          label="Reason for Repair"
        />
        <.input field={@form[:description]} type="textarea" label="Description" />
        <.input field={@form[:comments]} type="textarea" label="Comments" />
      </div>
      <div class="mb-4">
        <span class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
          Work Order Photos
        </span>
        <div
          class="grid grid-cols-3 gap-4 mb-4 sm:grid-cols-4"
          id="issue-photos-list"
          phx-update="ignore"
        >
          <%= if @work_order do %>
            <div :for={photo <- @work_order.work_order_photos} x-data="{checked: false}">
              <figure class="relative max-w-sm transition-all duration-300 cursor-pointer hover:grayscale-0">
                <a href="#">
                  <img
                    class="rounded-lg"
                    x-bind:class="checked && 'filter grayscale'"
                    src={Fleetms.WorkOrderPhoto.url({photo.filename, @work_order})}
                    alt=""
                  />
                </a>
                <figcaption class="absolute px-4 text-lg text-white bottom-2">
                  <input
                    id={["photo_id_", photo.id]}
                    name={[@form[:photos_to_delete_ids].name, "[]"]}
                    type="checkbox"
                    class="hidden"
                    value={photo.id}
                  />
                  <div x-show="! checked">
                    <label
                      class="px-2 py-1 text-sm font-semibold bg-red-600 rounded-md hover:bg-red-700 cursor-pointer"
                      for={["photo_id_", photo.id]}
                      x-on:click="checked = ! checked"
                    >
                      <i class="fa-solid fa-trash" /> Delete
                    </label>
                  </div>
                  <div x-show="checked">
                    <label
                      class="px-2 py-1 text-sm font-semibold bg-green-600 rounded-md hover:bg-green-700 cursor-pointer"
                      for={["photo_id_", photo.id]}
                      x-on:click="checked = ! checked"
                    >
                      <i class="fa-solid fa-trash-arrow-up" /> Undo Delete
                    </label>
                  </div>
                </figcaption>
              </figure>
            </div>
          <% end %>
        </div>
      </div>
      <.alert :if={@disallow_uploads} kind={:warning}>
        <%= @upload_disallow_msg %>
      </.alert>
      <div :if={not @disallow_uploads}>
        <.alert :for={err <- upload_errors(@uploads.work_order_photos)} kind={:error}>
          <%= error_to_string(err) %>
        </.alert>
      </div>
      <div :if={not @disallow_uploads} class="grid gap-6 mb-6 md:grid-cols-2">
        <%= for {entry, _i} <- Enum.with_index(@uploads.work_order_photos.entries) do %>
          <div>
            <.live_img_preview entry={entry} width="auto" height="200" />
            <div class="my-2">
              <.alert :for={err <- upload_errors(@uploads.work_order_photos, entry)} kind={:error}>
                <%= error_to_string(err) %>
              </.alert>
            </div>
            <div class="my-2">
              <.progress_bar progress={entry.progress} />
            </div>
            <div>
              <.button
                kind={:warning}
                type="button"
                phx-click="remove_photo"
                phx-value-ref={entry.ref}
              >
                Remove
              </.button>
            </div>
          </div>
        <% end %>
      </div>

      <.upload_input
        :if={not @disallow_uploads}
        upload={@uploads.work_order_photos}
        ref={@uploads.work_order_photos.ref}
      >
        <:label>
          <span class="font-semibold">Click to upload</span> or drag and drop
        </:label>

        <:description>
          <span class="text-sm text-gray-500 dark:text-gray-400">
            PNG, JPG, JPEG up to 2MB
          </span>
        </:description>
      </.upload_input>
      <div class="border-4 border-gray-200 dark:border-gray-700 rounded-md mb-4">
        <h4 class="text-start text-lg md:text-xl font-bold text-gray-800 dark:text-gray-100 px-2 py-2">
          Issues
        </h4>

        <div class="text-end">
          <.button
            id="work_orders_issues_drawer_button"
            type="button"
            size={:xs}
            data-drawer-target="work_orders_line_items_drawer"
            data-drawer-show="work_orders_line_items_drawer"
            aria-controls="work_orders_line_items_drawer"
          >
            <i class="fa-solid fa-plus mr-2" />Add Issues
          </.button>
        </div>
        <.alert :if={is_nil(@work_order) or @work_order.issues == []} kind={:warning}>
          No Issues associated with the selected vehicle yet.
        </.alert>
        <div class="overflow-x-auto">
          <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
              <tr>
                <th scope="col" class="px-4 py-3">Title</th>
                <th scope="col" class="px-4 py-3">Status</th>
                <th scope="col" class="px-4 py-3">Date Reported</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <.inputs_for :let={issue_form} field={@form[:issues]}>
                <tr class="border-b dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700">
                  <td class="px-4 py-2">
                    <%= get_form_value(issue_form, :title) %>
                  </td>
                  <td>
                    <.badge
                      :if={get_form_value(issue_form, :status) == :Open}
                      kind={:primary}
                      label={get_form_value(issue_form, :status)}
                    />
                    <.badge
                      :if={get_form_value(issue_form, :status) == :Closed}
                      kind={:warning}
                      label={get_form_value(issue_form, :status)}
                    />
                    <.badge
                      :if={get_form_value(issue_form, :status) == :Resolved}
                      kind={:success}
                      label={get_form_value(issue_form, :status)}
                    />
                  </td>
                  <td><%= get_form_value(issue_form, :date_reported) %></td>
                  <td>
                    <.button
                      type="button"
                      kind={:danger}
                      size={:xs}
                      phx-click={
                        JS.push("remove_issue_from_form",
                          value: %{
                            path: issue_form.name,
                            issue_id: get_form_value(issue_form, :id)
                          }
                        )
                      }
                    >
                      <i class="fa-solid fa-trash mr-2" />delete
                    </.button>
                  </td>
                </tr>
              </.inputs_for>
            </tbody>
          </table>
        </div>
      </div>

      <div class="border-2 border-gray-200 dark:border-gray-700 rounded-md mb-4 p-2">
        <h4 class="text-start text-lg md:text-xl font-bold text-gray-800 dark:text-gray-100 px-2 py-2">
          Service Tasks
        </h4>
        <div class="text-end">
          <.button
            id="work_orders_reminders_drawer_button"
            type="button"
            size={:xs}
            data-drawer-target="work_orders_line_items_drawer"
            data-drawer-show="work_orders_line_items_drawer"
            aria-controls="work_orders_line_items_drawer"
            phx-click={JS.focus_first(to: "#accordion-vehicle-service-reminders-heading")}
          >
            <i class="fa-solid fa-plus mr-2" />Add Service Reminders
          </.button>
          <.button
            id="work_orders_service_tasks_drawer_button"
            type="button"
            size={:xs}
            data-drawer-target="work_orders_line_items_drawer"
            data-drawer-show="work_orders_line_items_drawer"
            aria-controls="work_orders_line_items_drawer"
            phx-click={JS.focus_first(to: "#accordion-vehicle-service-tasks-heading")}
          >
            <i class="fa-solid fa-plus mr-2" />Add Service Tasks
          </.button>
        </div>
        <.inputs_for :let={service_task_form} field={@form[:work_order_service_tasks]}>
          <div class="border-8 border-gray-200 rounded-md dark:border-gray-700 p-2 mt-2 text-gray-800 dark:text-gray-100">
            <.input field={service_task_form[:service_task_id]} type="text" class="hidden" />
            <.input field={service_task_form[:service_task_name]} type="text" class="hidden" />
            <span class="font-semibold text-gray-800 dark:text-gray-100">
              <%= get_form_value(service_task_form, :service_task_name) %>
            </span>
            | <span class="text-sm">Reminder Info:</span>
            <.badge
              :if={is_nil(get_form_value(service_task_form, :service_reminder))}
              kind={:warning}
              label="Has no related Service Reminder"
            />
            <.inputs_for :let={reminder_form} field={service_task_form[:service_reminder]}>
              <span>
                <.badge
                  :if={not is_nil(get_form_value(service_task_form, :service_reminder))}
                  kind={:primary}
                  label={
                    cond do
                      get_form_value(reminder_form, :mileage_interval) &&
                          get_form_value(reminder_form, :time_interval) ->
                        "Every #{get_form_value(reminder_form, :mileage_interval)}km or  #{get_form_value(reminder_form, :time_interval)} #{get_form_value(reminder_form, :time_interval_unit)}"

                      get_form_value(reminder_form, :mileage_interval) ->
                        "Every #{get_form_value(reminder_form, :mileage_interval)}"

                      get_form_value(reminder_form, :time_interval) ->
                        "Every #{get_form_value(reminder_form, :time_interval)} #{get_form_value(reminder_form, :time_interval_unit)}"

                      true ->
                        "--"
                    end
                  }
                />
                <.badge
                  :if={is_nil(get_form_value(service_task_form, :service_reminder))}
                  kind={:warning}
                  label="Has no related Service Reminder"
                />
              </span>
              <.input field={reminder_form[:id]} type="text" class="hidden" />
              <.input field={reminder_form[:mileage_interval]} type="text" class="hidden" />
              <.input field={reminder_form[:time_interval]} type="text" class="hidden" />
              <.input field={reminder_form[:time_interval_unit]} type="text" class="hidden" />
              <.input
                field={reminder_form[:is_from_service_reminder]}
                type="checkbox"
                class="hidden"
              />
            </.inputs_for>

            <.inputs_for
              :let={part_form}
              field={service_task_form[:work_order_service_task_parts]}
            >
              <div class="border-4 border-gray-200 rounded-md dark:border-gray-700 p-2 mt-2">
                <div class="grid gap-2 mb-4 sm:grid-cols-2">
                  <div id="part-input">
                    <.input
                      field={part_form[:part_id]}
                      type="select"
                      required
                      prompt="Select a Part"
                      options={@parts}
                      label="Part"
                    />
                  </div>
                  <div>
                    <.input
                      field={part_form[:update_inventory]}
                      type="checkbox"
                      label="Update Stock quantity"
                    />
                  </div>
                  <div
                    :if={
                      get_form_value(part_form, :update_inventory) not in [false, "false", nil]
                    }
                    id="inventory_location-input"
                  >
                    <.input
                      field={part_form[:inventory_location_id]}
                      type="select"
                      prompt="Select a Part Location"
                      options={@inventory_locations}
                      label="Inventory Location"
                      required
                    />
                  </div>
                  <.input field={part_form[:unit_cost]} type="text" label="Unit Cost" />
                  <.input field={part_form[:quantity]} type="number" step="any" label="Quantity" />
                  <.input field={part_form[:subtotal]} type="text" label="SubTotal" />
                </div>
                <div class="my-2">
                  <.button
                    size={:xs}
                    kind={:danger}
                    type="button"
                    phx-click="remove_form"
                    phx-value-path={part_form.name}
                  >
                    <i class="fa-solid fa-trash" /> Delete Part
                  </.button>
                </div>
                <.input field={part_form[:comments]} type="textarea" label="Comments" />
              </div>
            </.inputs_for>
            <div class="mt-1">
              <.button
                size={:xs}
                type="button"
                phx-click="add_form"
                phx-value-path={service_task_form[:work_order_service_task_parts].name}
              >
                <i class="fa-solid fa-plus" /> Add Part
              </.button>
            </div>
            <div class="my-2">
              <.button
                :if={not has_reminder?(service_task_form)}
                size={:xs}
                kind={:danger}
                type="button"
                phx-click={
                  JS.push("remove_form",
                    value: %{
                      path: service_task_form.name
                    }
                  )
                }
              >
                <i class="fa-solid fa-trash" /> Delete Service Task
              </.button>
              <.button
                :if={has_reminder?(service_task_form)}
                size={:xs}
                kind={:danger}
                type="button"
                phx-click={
                  JS.push("remove_service_reminder_from_form",
                    value: %{
                      path: service_task_form.name,
                      # get value using a string key or atom key, to work in situations where the reminder is removed and added again before the form is saved.
                      service_reminder_id:
                        Map.get(get_form_value(service_task_form, :service_reminder), "id") ||
                          get_form_value(service_task_form, :service_reminder).id
                    }
                  )
                }
              >
                <i class="fa-solid fa-trash" /> Delete Service Task
              </.button>
            </div>
          </div>
        </.inputs_for>
      </div>
      <:actions>
        <.button type="submit" phx-disable-with="Saving...">
          <i class="fa-solid fa-floppy-disk me-1"></i>Save Work Order
        </.button>
      </:actions>
    </.simple_form>
  </div>
</.modal>

<div
  :if={@live_action in [:new, :edit]}
  id="work_orders_line_items_drawer"
  class="fixed top-0 left-0 w-full h-screen max-w-3xl p-4 overflow-y-auto transition-transform -translate-x-full bg-white dark:bg-gray-800"
  tabindex="-1"
  data-clone-attributes=""
  aria-labelledby="work_orders_line_items_drawer-label"
  aria-hidden="true"
  style="z-index: 100;"
>
  <h5
    id="drawer-label"
    class="inline-flex items-center mb-6 text-sm font-semibold text-gray-500 uppercase dark:text-gray-400"
  >
    Work Order Line Items
  </h5>
  <button
    type="button"
    data-drawer-dismiss="work_orders_line_items_drawer"
    aria-controls="work_orders_line_items_drawer"
    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 absolute top-2.5 right-2.5 inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
  >
    <svg
      aria-hidden="true"
      class="w-5 h-5"
      fill="currentColor"
      viewBox="0 0 20 20"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fill-rule="evenodd"
        d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
        clip-rule="evenodd"
      >
      </path>
    </svg>
    <span class="sr-only">Close menu</span>
  </button>

  <div
    id="accordion-color"
    data-accordion="collapse"
    data-clone-attributes=""
    data-active-classes="bg-blue-100 dark:bg-gray-800 text-blue-600 dark:text-white"
  >
    <h2 id="accordion-vehicle-issues-heading">
      <button
        type="button"
        class="flex items-center justify-between w-full p-5 font-medium text-left text-gray-500 border border-b-0 border-gray-200 rounded-t-xl focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-800 dark:border-gray-700 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-gray-800"
        data-accordion-target="#accordion-vehicle-issues-body"
        data-clone-attributes=""
        aria-expanded="false"
        aria-controls="accordion-vehicle-issues-body"
      >
        <span>Vehicle Issues</span>
        <svg
          data-accordion-icon
          class="w-3 h-3 rotate-180 shrink-0"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5 5 1 1 5"
          />
        </svg>
      </button>
    </h2>
    <div
      id="accordion-vehicle-issues-body"
      class="hidden"
      data-clone-attributes=""
      aria-labelledby="accordion-vehicle-issues-heading"
    >
      <div class="p-5 border border-b-0 border-gray-200 dark:border-gray-700 dark:bg-gray-900">
        <.table_2
          id="vehicle-issues-table"
          rows={@streams.vehicle_issues}
          row_click={
            fn {_id, issue} ->
              JS.navigate(~p"/issues/#{issue}")
            end
          }
        >
          <:col :let={{_id, issue}} label="Title"><%= issue.title %></:col>
          <:col :let={{_id, issue}} label="Status">
            <.badge :if={issue.status == :Open} kind={:primary} label={issue.status} />
            <.badge :if={issue.status == :Closed} kind={:warning} label={issue.status} />
            <.badge :if={issue.status == :Resolved} kind={:success} label={issue.status} />
          </:col>

          <:col :let={{_id, issue}} label="Date Reported"><%= issue.date_reported %></:col>
          <:action :let={{_id, issue}}>
            <%= if issue.id in @work_order_issues_ids do %>
              <.badge kind={:success} label="Already added to form" />
            <% else %>
              <.button
                type="button"
                size={:xs}
                phx-click="add_issue"
                phx-target="#work-order-form"
                phx-value-issue_id={issue.id}
              >
                <i class="fa-solid fa-plus mr-2" />Add Issue
              </.button>
            <% end %>
          </:action>
        </.table_2>
      </div>
    </div>
    <h2 id="accordion-vehicle-service-reminders-heading">
      <button
        type="button"
        class="flex items-center justify-between w-full p-5 font-medium text-left text-gray-500 border border-b-0 border-gray-200 focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-800 dark:border-gray-700 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-gray-800"
        data-accordion-target="#accordion-vehicle-service-reminders-body"
        data-clone-attributes=""
        aria-expanded="false"
        aria-controls="accordion-vehicle-service-reminders-body"
      >
        <span>Vehicle Service Reminders</span>
        <svg
          data-accordion-icon
          class="w-3 h-3 rotate-180 shrink-0"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5 5 1 1 5"
          />
        </svg>
      </button>
    </h2>
    <div
      id="accordion-vehicle-service-reminders-body"
      class="hidden"
      data-clone-attributes=""
      aria-labelledby="accordion-vehicle-service-reminders-heading"
    >
      <div class="p-5 border border-b-0 border-gray-200 dark:border-gray-700">
        <.table_2
          id="vehicle-service_reminders-table"
          rows={@streams.vehicle_service_reminders}
          row_click={
            fn {_id, service_reminder} ->
              JS.navigate(~p"/service_reminders/#{service_reminder}")
            end
          }
        >
          <:col :let={{_id, service_reminder}} label="Service Task">
            <%= service_reminder.service_task.name %>
          </:col>
          <:col :let={{_id, service_reminder}} label="Service Group">
            <%= render_value(service_reminder.service_group_name) %>
          </:col>
          <:col :let={{_id, service_reminder}} label="Interval">
            <.badge
              kind={
                case service_reminder.due_status do
                  :Overdue ->
                    :danger

                  :"Due Soon" ->
                    :warning

                  :Upcoming ->
                    :info
                end
              }
              label={service_reminder.due_status}
            />
          </:col>
          <:col :let={{_id, service_reminder}} label="Interval">
            <.badge
              kind={:primary}
              label={
                cond do
                  service_reminder.mileage_interval && service_reminder.time_interval ->
                    "Every #{service_reminder.mileage_interval}km or  #{service_reminder.time_interval} #{service_reminder.time_interval_unit}"

                  service_reminder.mileage_interval ->
                    "Every #{service_reminder.mileage_interval}"

                  service_reminder.time_interval ->
                    "Every #{service_reminder.time_interval} #{service_reminder.time_interval_unit}"

                  true ->
                    "--"
                end
              }
            />
          </:col>

          <:action :let={{_id, service_reminder}}>
            <%= if service_reminder.id in @work_order_service_reminders_ids do %>
              <.badge kind={:success} label="Already added to form" />
            <% else %>
              <.button
                type="button"
                size={:xs}
                phx-click={
                  JS.push("add_service_reminder",
                    value: %{service_reminder_id: service_reminder.id}
                  )
                  |> JS.set_attribute({"disabled", "true"})
                  |> JS.add_class(
                    "!bg-gray-500 dark:bg-gray-600 hover:bg-gray-500 dark:hover:bg-gray-600",
                    transition: {"ease-out duration-500", "opacity-100", "opacity-15"}
                  )
                }
              >
                <i class="fa-solid fa-plus mr-2" />Add Reminder
              </.button>
            <% end %>
          </:action>
        </.table_2>
      </div>
    </div>

    <h2 id="accordion-vehicle-service-tasks-heading">
      <button
        type="button"
        class="flex items-center justify-between w-full p-5 font-medium text-left text-gray-500 border border-b-0 border-gray-200 focus:ring-4 focus:ring-blue-200 dark:focus:ring-blue-800 dark:border-gray-700 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-gray-800"
        data-accordion-target="#accordion-vehicle-service-tasks-body"
        data-clone-attributes=""
        aria-expanded="false"
        aria-controls="accordion-vehicle-service-tasks-body"
      >
        <span>Service Tasks</span>
        <svg
          data-accordion-icon
          class="w-3 h-3 rotate-180 shrink-0"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 10 6"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5 5 1 1 5"
          />
        </svg>
      </button>
    </h2>
    <div
      id="accordion-vehicle-service-tasks-body"
      class="hidden"
      data-clone-attributes=""
      aria-labelledby="accordion-vehicle-service-tasks-heading"
    >
      <div class="p-5 border border-b-0 border-gray-200 dark:border-gray-700">
        <.table_2 id="vehicle-service_tasks-table" rows={@streams.service_tasks}>
          <:col :let={{_id, service_task}} label="Service Task">
            <%= service_task.name %>
          </:col>
          <:col :let={{_id, service_task}} label="Service Reminder">
            <.badge
              :if={not is_nil(service_task.service_reminder)}
              kind={:primary}
              label={
                cond do
                  service_task.service_reminder.mileage_interval &&
                      service_task.service_reminder.time_interval ->
                    "Every #{service_task.service_reminder.mileage_interval}km or  #{service_task.service_reminder.time_interval} #{service_task.service_reminder.time_interval_unit}"

                  service_task.service_reminder.mileage_interval ->
                    "Every #{service_task.service_reminder.mileage_interval}km"

                  service_task.service_reminder.time_interval ->
                    "Every #{service_task.service_reminder.time_interval} #{service_task.service_reminder.time_interval_unit}"

                  true ->
                    "--"
                end
              }
            />
          </:col>
          <:col :let={{_id, service_task}} label="Service Group">
            <%= render_value(service_task.service_reminder, :service_group_name) %>
          </:col>
          <:action :let={{_id, service_task}}>
            <.button
              type="button"
              size={:xs}
              phx-click="add_service_task"
              phx-value-service_task_id={service_task.id}
            >
              <i class="fa-solid fa-plus mr-2" />Add Service Task
            </.button>
          </:action>
        </.table_2>
      </div>
    </div>
  </div>
</div>

<.modal
  :if={@live_action == :filter_form}
  id="filter-form-modal"
  show
  max_width="max-w-5xl"
  phx_click_away={false}
  phx_window_keydown={false}
  on_cancel={
    JS.navigate(
      ~p"/work_orders?#{Map.merge(@paginate_sort_opts, @search_params) |> Map.merge(@filter_form_data)}"
    )
  }
>
  <.live_component
    module={FleetmsWeb.WorkOrderLive.FilterFormComponent}
    id="filter-form-component"
    title={@page_title}
    action={@live_action}
    paginate_sort_opts={@paginate_sort_opts}
    search_params={@search_params}
    filter_form_data={@filter_form_data}
    current_user={@current_user}
    tenant={@tenant}
  />
</.modal>
